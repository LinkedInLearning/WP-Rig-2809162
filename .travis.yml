# Travis CI (MIT License) configuration file for the WP Rig WordPress theme development rig.
# @link https://travis-ci.org/

# For use with the WP Rig WordPress theme development rig.
# @link https://github.com/wprig/wprig

# Ditch sudo and use containers.
# @link https://docs.travis-ci.com/user/migrating-from-legacy/#Why-migrate-to-container-based-infrastructure%3F
# @link https://docs.travis-ci.com/user/workers/container-based-infrastructure/#Routing-your-build-to-container-based-infrastructure
sudo: false
dist: trusty

# Declare project language.
# @link https://about.travis-ci.org/docs/user/languages/php/
language: php

# Declare versions of PHP to use. Use one decimal max.
# @link https://docs.travis-ci.com/user/build-configuration/
matrix:
  fast_finish: true

  include:
    - php: 7.2
      env: UNIT=1 SNIFF=1 TEST_GULP=1
    - php: 7.0
      env: UNIT=1
    - php: 'nightly'
      env: UNIT=1
    - php: 7.2
      env: INTEGRATION=1 WP_VERSION=latest
    - php: 7.2
      env: INTEGRATION=1 WP_VERSION=4.5
    - php: 7.2
      env: INTEGRATION=1 WP_VERSION=master

  allow_failures:
    - php: 'nightly'
      env: UNIT=1
    - php: 7.2
      env: INTEGRATION=1 WP_VERSION=master

# Use this to prepare the system to install prerequisites or dependencies.
# e.g. sudo apt-get update.
# Failures in this section will result in build status 'errored'.
before_install:
  # Install Composer dependencies.
  - |
    if [[ ( "$SNIFF" == "1" ) || ( "$UNIT" == "1" ) || ( "$INTEGRATION" == "1" ) ]]; then
      composer install;
    fi

  # Install NPM dependencies.
  - |
    if [[ ( "$SNIFF" == "1" ) || ( "$TEST_GULP" == "1" ) ]]; then
      npm install;
    fi

# Use this to prepare your build for testing.
# e.g. copy database configurations, environment variables, etc.
# Failures in this section will result in build status 'errored'.
before_script:
  # Speed up build time by disabling Xdebug.
  - phpenv config-rm xdebug.ini || echo 'No xdebug config.'

  # Pull in the WP Core jshint rules.
  - |
    if [[ "$SNIFF" == "1" ]]; then
      wget https://develop.svn.wordpress.org/trunk/.jshintrc;
    fi

  # Setup WordPress core test suite for integration.
  - |
    if [[ "$INTEGRATION" == "1" ]]; then
      if [[ "$WP_VERSION" == "latest" ]]; then
        curl -s http://api.wordpress.org/core/version-check/1.7/ > /tmp/wp-latest.json
        WP_VERSION=$(grep -o '"version":"[^"]*' /tmp/wp-latest.json | sed 's/"version":"//')
      fi
      THEME_SLUG=$(basename $(pwd))
      export WP_DEVELOP_DIR=/tmp/wordpress/
      git clone --depth=50 --branch="$WP_VERSION" git://develop.git.wordpress.org/ /tmp/wordpress
      cd ..
      cp -r "$THEME_SLUG" "/tmp/wordpress/src/wp-content/themes/$THEME_SLUG"
      cd /tmp/wordpress/
      cp wp-tests-config-sample.php wp-tests-config.php
      sed -i "s/youremptytestdbnamehere/wordpress_tests/" wp-tests-config.php
      sed -i "s/yourusernamehere/travis/" wp-tests-config.php
      sed -i "s/yourpasswordhere//" wp-tests-config.php
      mysql -e "CREATE DATABASE wordpress_tests;" -uroot
      cd "/tmp/wordpress/src/wp-content/themes/$THEME_SLUG"
    fi

  # After setup you should refresh your path.
  - phpenv rehash;

# Run test script commands.
# Default is specific to project language.
# All commands must exit with code 0 on success. Anything else is considered failure.
script:
  # Search for PHP syntax errors.
  - find -L . -name '*.php' ! -path "*/vendor/*" -print0 | xargs -0 -n 1 -P 4 php -l

  # Check the theme against WordPress Coding Standards.
  - |
    if [[ "$SNIFF" == "1" ]]; then
      composer run-script phpcs-dev
    fi

  # Run the theme through JavaScript Code Style checker.
  - |
    if [[ "$SNIFF" == "1" ]]; then
      $(npm bin)/eslint .;
    fi

  # Run the unit tests.
  - |
    if [[ "$UNIT" == "1" ]]; then
      composer run-script phpunit-dev
    fi

  # Run the integration tests.
  - |
    if [[ "$INTEGRATION" == "1" ]]; then
      composer run-script phpunit-integration-dev
    fi

  # Run the gulp tests.
  - |
    if [[ "$TEST_GULP" == "1" ]]; then
      npm run lint-gulp
      npm run test-gulp
    fi

# Receive notifications for build results.
# @link https://docs.travis-ci.com/user/notifications/#Email-notifications
notifications:
  email: false
